import tkinter as tk
from tkinter import messagebox
from collab_filtering import collaborative_filtering
from content_filtering import content_filtering
import random
import spotipy
from spotipy.oauth2 import SpotifyOAuth

def authenticate():
    # Create the authentication window
    auth_window = tk.Toplevel()
    auth_window.title("Spotify Authentication")
    auth_window.geometry("400x300")

    client_id_label = tk.Label(auth_window, text="Client ID:")
    client_id_label.pack()
    client_id_entry = tk.Entry(auth_window)
    client_id_entry.pack()

    client_secret_label = tk.Label(auth_window, text="Client Secret:")
    client_secret_label.pack()
    client_secret_entry = tk.Entry(auth_window)
    client_secret_entry.pack()

    redirect_uri_label = tk.Label(auth_window, text="Redirect URI:")
    redirect_uri_label.pack()
    redirect_uri_entry = tk.Entry(auth_window)
    redirect_uri_entry.pack()

    scope_label = tk.Label(auth_window, text="Scope:")
    scope_label.pack()
    scope_entry = tk.Entry(auth_window)
    scope_entry.pack()

    def authenticate_spotify():
        try:
            CLIENT_ID = client_id_entry.get()
            CLIENT_SECRET = client_secret_entry.get()
            REDIRECT_URI = redirect_uri_entry.get()
            SCOPE = scope_entry.get()

            sp_oauth = spotipy.oauth2.SpotifyOAuth(CLIENT_ID, CLIENT_SECRET, REDIRECT_URI, scope=SCOPE)

            auth_url = sp_oauth.get_authorize_url()
            tk.messagebox.showinfo("Authorization", f"Visit this URL and grant access:\n{auth_url}")
            response = tk.simpledialog.askstring("Authorization", "Enter the full URL you received after authorization:")

            code = sp_oauth.parse_response_code(response)
            token_info = sp_oauth.get_access_token(code)
            access_token = token_info['access_token']
            sp = spotipy.Spotify(auth=access_token)

            auth_window.destroy()

            # Continue with playlist generation
            generate_playlist(sp)

        except Exception as e:
            tk.messagebox.showerror("Error", str(e))

    authenticate_button = tk.Button(auth_window, text="Authenticate", command=authenticate_spotify)
    authenticate_button.pack()

def generate_playlist(sp):
    try:
        # Step 1: Retrieve user preferences for danceability, energy, valence, and novelty
        danceability = float(danceability_slider.get())
        energy = float(energy_slider.get())
        valence = float(valence_slider.get())
        novelty_factor = float(novelty_slider.get())

        # Step 2: Perform collaborative filtering or content filtering based on the chosen method
        recommendations = []
        if method_var.get() == "genres":
            user_genres = genres_entry.get().split(",")
            recommendations = content_filtering(sp, danceability, energy, valence, user_genres, novelty_factor)
        elif method_var.get() == "artists":
            recommendations = collaborative_filtering(sp)
        elif method_var.get() == "both":
            user_genres = genres_entry.get().split(",")
            collaborative_recommendations = collaborative_filtering(sp)
            content_recommendations = content_filtering(sp, danceability, energy, valence, user_genres, novelty_factor)
            recommendations = collaborative_recommendations + content_recommendations
        else:
            messagebox.showerror("Error", "Invalid method chosen. Exiting...")
            return

        # Step 3: Create a new private playlist
        playlist = sp.user_playlist_create(USER_ID, PLAYLIST, public=False,
                                           description='Playlist generated by Playlistify')

        # Step 4: Add the recommended tracks to the playlist in a shuffled order
        random.shuffle(recommendations)
        track_ids = [track['id'] for track in recommendations]
        sp.playlist_add_items(playlist['id'], track_ids)

        messagebox.showinfo("Playlist Generated", "Playlist is generated and tracks are added.")

    except Exception as e:
        messagebox.showerror("Error", str(e))

# Create the main window
window = tk.Tk()
window.title("Playlist Generator")
window.geometry("400x600")

# Danceability
danceability_label = tk.Label(window, text="Danceability (0.0 - 1.0):")
danceability_label.pack()
danceability_slider = tk.Scale(window, from_=0.0, to=1.0, resolution=0.1, orient=tk.HORIZONTAL)
danceability_slider.pack()

# Energy
energy_label = tk.Label(window, text="Energy (0.0 - 1.0):")
energy_label.pack()
energy_slider = tk.Scale(window, from_=0.0, to=1.0, resolution=0.1, orient=tk.HORIZONTAL)
energy_slider.pack()

# Valence
valence_label = tk.Label(window, text="Valence (0.0 - 1.0):")
valence_label.pack()
valence_slider = tk.Scale(window, from_=0.0, to=1.0, resolution=0.1, orient=tk.HORIZONTAL)
valence_slider.pack()

# Novelty
novelty_label = tk.Label(window, text="Novelty (0.0 - 1.0):")
novelty_label.pack()
novelty_slider = tk.Scale(window, from_=0.0, to=1.0, resolution=0.1, orient=tk.HORIZONTAL)
novelty_slider.pack()

# Method
method_label = tk.Label(window, text="Playlist Generation Method:")
method_label.pack()
method_var = tk.StringVar()
genres_radio = tk.Radiobutton(window, text="Genres", variable=method_var, value="genres")
genres_radio.pack()
artists_radio = tk.Radiobutton(window, text="Artists", variable=method_var, value="artists")
artists_radio.pack()
both_radio = tk.Radiobutton(window, text="Both", variable=method_var, value="both")
both_radio.pack()

# Genres
genres_label = tk.Label(window, text="Genres (comma-separated):")
genres_label.pack()
genres_entry = tk.Entry(window)
genres_entry.pack()

authenticate_button = tk.Button(window, text="Authenticate", command=authenticate)
authenticate_button.pack()

generate_button = tk.Button(window, text="Generate Playlist", command=generate_playlist)
generate_button.pack()

# Run the GUI
window.mainloop()
