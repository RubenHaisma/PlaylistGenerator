import spotipy
from spotipy.oauth2 import SpotifyOAuth


def collaborative_filtering(sp):
    # Get the user's top artists
    top_artists = sp.current_user_top_artists(limit=5)

    # Print user's favorite artists
    print("Your favorite artists:")
    for i, artist in enumerate(top_artists['items'], 1):
        print(f"{i}. {artist['name']}")

    # Get the top tracks of similar users based on their top artists
    similar_users_tracks = []
    for artist in top_artists['items']:
        tracks = sp.artist_top_tracks(artist['id'], country='US')['tracks']
        similar_users_tracks.extend(tracks)

    # Return the recommended tracks from similar users' top tracks
    return similar_users_tracks


def content_filtering(sp, danceability, energy, valence):
    # Generate recommendations based on target attributes and user preferences
    recommendations = sp.recommendations(seed_genres=['pop', 'rock'], limit=10,
                                         target_danceability=danceability,
                                         target_energy=energy,
                                         target_valence=valence)

    return recommendations['tracks']


def generate_playlist():
    # Prompt the user to enter their Spotify API credentials
    CLIENT_ID = input("Enter your Spotify API client ID: ")
    CLIENT_SECRET = input("Enter your Spotify API client secret: ")
    REDIRECT_URI = input("Enter your Spotify API redirect URI: ")
    USER_ID = input("Enter your Spotify user ID: ")

    # Scope: the access rights you want for your application
    SCOPE = 'playlist-modify-private playlist-read-private user-top-read user-read-recently-played'

    # Create an instance of the SpotifyOAuth class
    sp_oauth = spotipy.oauth2.SpotifyOAuth(CLIENT_ID, CLIENT_SECRET, REDIRECT_URI, scope=SCOPE)

    # Generate the authorization URL
    auth_url = sp_oauth.get_authorize_url()

    # Ask the user to grant access via the generated URL
    print("Visit this URL and grant access:")
    print(auth_url)
    response = input("Enter the full URL you received after authorization: ")

    # Exchange the authorization code for an access token
    code = sp_oauth.parse_response_code(response)
    token_info = sp_oauth.get_access_token(code)

    # Get the access token from the token information
    access_token = token_info['access_token']

    # Create a Spotify object with the access token
    sp = spotipy.Spotify(auth=access_token)

    # Step 1: Retrieve user preferences for danceability, energy, and valence
    danceability = float(input("How important is danceability (0.0 - 1.0)? "))
    energy = float(input("How important is energy (0.0 - 1.0)? "))
    valence = float(input("How important is valence (0.0 - 1.0)? "))

    # Step 2: Perform collaborative filtering to generate recommendations
    collaborative_recommendations = collaborative_filtering(sp)

    # Step 3: Perform content filtering to generate recommendations
    content_recommendations = content_filtering(sp, danceability, energy, valence)

    # Combine the recommendations from both techniques
    combined_recommendations = collaborative_recommendations + content_recommendations

    # Step 4: Create a new private playlist
    playlist = sp.user_playlist_create(USER_ID, 'My Generated Playlist', public=False,
                                       description='Playlist generated by Playlistify')

    # Step 5: Add the recommended tracks to the playlist
    track_ids = [track['id'] for track in combined_recommendations]
    sp.playlist_add_items(playlist['id'], track_ids)

    print("Playlist is generated and tracks are added.")


# Call the generate_playlist function to generate a playlist
generate_playlist()
