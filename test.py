from collab_filtering import collaborative_filtering
from content_filtering import content_filtering
import random
from authenticate import authenticate

def test_algorithm():
    # Test case 
    sp, USER_ID, PLAYLIST = authenticate()
    danceability = 0.8
    energy = 0.6
    valence = 0.9
    novelty_factor = 0.5
    method = "genres"
    user_genres = ["pop", "rock"]
    playlist_length = 10

    print("Running test case...")
    try:
        recommendations = []
        if method == "genres":
            recommendations = content_filtering(sp, danceability, energy, valence, user_genres, novelty_factor)
        elif method == "artists":
            recommendations = collaborative_filtering(sp)
        elif method == "both":
            collaborative_recommendations = collaborative_filtering(sp)
            content_recommendations = content_filtering(sp, danceability, energy, valence, user_genres, novelty_factor)
            recommendations = collaborative_recommendations + content_recommendations
        else:
            print("Invalid method chosen. Exiting...")
            test_algorithm()
            return

        playlist = sp.user_playlist_create(USER_ID, PLAYLIST, public=False, description='Playlist generated by PlaylistGenerator')
        random.shuffle(recommendations)
        track_ids = [track['id'] for track in recommendations[:playlist_length]]
        sp.playlist_add_items(playlist['id'], track_ids)

        print("Test case passed: Playlist is generated and tracks are added.")
    except Exception as e:
        print("Test case failed:", str(e))

# Run the test function
test_algorithm()
